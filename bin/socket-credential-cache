#!/usr/bin/env bash
# shellcheck source-path=..

socket_credential_cache() {
  set -e
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  source "$pkgroot/.upkg/records.sh/records.sh"

  DOC="socket-credential-cache
Usage:
  socket-cache-credential [options] set [--timeout=S] ITEMNAME
  socket-cache-credential [options] get ITEMNAME
  socket-cache-credential [options] list
  socket-cache-credential [options] clear [ITEMNAME]
  socket-cache-credential [options] serve ITEMNAME

Options:
  --timeout=S  Terminate after S seconds of no activity [default: 900]
  --debug      Turn on bash -x
"
# docopt parser below, refresh this parser with `docopt.sh socket-credential-cache`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.1'; source \
"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:399};usage=${DOC:24:263}
digest=97de8;options=(' --debug 0' ' --timeout 1');node_0(){ switch __debug 0;}
node_1(){ value __timeout 1;};node_2(){ value ITEMNAME a;};node_3(){ switch \
set a:set;};node_4(){ switch get a:get;};node_5(){ switch list a:list;}
node_6(){ switch clear a:clear;};node_7(){ switch serve a:serve;};node_8(){
sequence 9 3 10 2;};node_9(){ optional 0;};node_10(){ optional 1;};node_11(){
sequence 9 4 2;};node_12(){ sequence 9 5;};node_13(){ sequence 9 6 14;}
node_14(){ optional 2;};node_15(){ sequence 9 7 2;};node_16(){ choice 8 11 12 \
13 15;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf \
"%s\n" "${DOC:24:263}" >&2;exit 1;}';local varnames=(__debug __timeout \
ITEMNAME set get list clear serve) varname;for varname in "${varnames[@]}"; do
unset "var_$varname";done;parse 16 "$@";local p=${DOCOPT_PREFIX:-''};for \
varname in "${varnames[@]}"; do unset "$p$varname";done;eval $p'__debug=${var_'\
'__debug:-false};'$p'__timeout=${var___timeout:-900};'$p'ITEMNAME=${var_ITEMNA'\
'ME:-};'$p'set=${var_set:-false};'$p'get=${var_get:-false};'$p'list=${var_list'\
':-false};'$p'clear=${var_clear:-false};'$p'serve=${var_serve:-false};';local \
docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' socket-credential-cache`
  eval "$(docopt "$@")"

  # shellcheck disable=2154
  if $__debug; then
    set -x
  fi

  "$pkgroot/.upkg/.bin/checkdeps" socat systemctl sha256sum
  # shellcheck disable=2154
  local socketpathmaxlength=108 socketspath=$HOME/.cache/credential-sockets \
    unitname socketbasename socketpath socketsetuppath namemaxlength socketbasenamedigest

  namemaxlength=$((socketpathmaxlength - ${#socketspath} - 12))
  socketbasename=${ITEMNAME//[^A-Za-z0-9_]/_}
  socketbasename=${socketbasename/#[^A-Za-z_]/_}
  if [[ ${#socketbasename} -gt $namemaxlength ]]; then
    socketbasenamedigest=$(sha256sum <<<"$socketbasename" | cut -d ' ' -f1)
    socketbasename=${socketbasename:0:$((namemaxlength-9))}-${socketbasenamedigest:0:8}
    verbose "Shortening socket name to '%s', the resulting socket path would be greater than %d characters" "$socketpathmaxlength" "$socketbasename"
  fi

  socketsetuppath=$socketspath/${socketbasename}_setup.sock
  socketpath=$socketspath/${socketbasename}.sock
  unitname=$(systemd-escape "$ITEMNAME")
  unitname="socket-credential-cache@$unitname.service"

  # shellcheck disable=2154
  if $set; then
    mkdir -p "$socketspath"
    if systemctl --user is-active --quiet "$unitname"; then
      fatal "'%s' is already cached" "$ITEMNAME"
    fi
    if ! systemctl --user start --quiet "$unitname"; then
      if ! systemctl --user list-unit-files --plain --no-legend | grep -q socket-credential-cache@.service; then
        fatal "Failed to start unit '%s'\nsocket-credential-cache@.service is not installed (refer to the README)" "$unitname"
      else
        fatal "Failed to start unit '%s'" "$unitname"
      fi
    fi
    if ! waitforsocket "$socketsetuppath"; then
      systemctl --user stop --quiet "$unitname"
      fatal "Timed out waiting for '%s' to become ready" "$socketsetuppath"
    fi
    if ! (printf "%d\n" "$__timeout"; cat) | socat -U UNIX-CONNECT:"$socketsetuppath" STDIN 2> >(LOGPROGRAM=socat pipe_verbose); then
      fatal "Failed to connect to '%s'" "$socketsetuppath"
    fi
    if ! waitforsocket "$socketpath"; then
      systemctl --user stop --quiet "$unitname"
      fatal "Timed out waiting for '%s' to become ready" "$socketpath"
    fi

  elif $get; then
    # When redirecting socat output it fails with "Bad file descriptor", so we pipe it to `cat` instead
    set -o pipefail
    socat -u -t0 UNIX-CONNECT:"$socketpath" STDOUT | cat

  elif $list; then
    for unitname in $(systemctl --user list-units 'socket-credential-cache@*.service' --plain --no-legend --state=active | cut -d' ' -f1); do
      unitname=${unitname%\.service*}
      unitname=${unitname#socket-credential-cache\@}
      # The var in printf is on purpose, it's an easy way to unescape all the \x escapes
      # shellcheck disable=2059
      printf "$unitname\n"
    done

  elif $clear; then
    if [[ -n $ITEMNAME ]]; then
      systemctl --user stop --quiet "$unitname"
    else
      for unitname in $(systemctl --user list-units 'socket-credential-cache@*.service' --plain --no-legend --state=active | cut -d' ' -f1); do
        systemctl --user stop --quiet "$unitname"
      done
    fi

  elif $serve; then
    # clean up socketpath after e.g. a system crash
    rm -f "$socketsetuppath" "$socketpath"
    systemd-notify --ready
    local timeout_sec secret
    IFS=$'\n' read -t 1 -r -d '' timeout_sec secret < <(socat -u -t0 UNIX-LISTEN:"$socketsetuppath,unlink-close,umask=177" STDOUT) || true
    [[ -z $timeout_sec ]] && fatal "No data passed to setup socket '%s' or timeout exceeded" "$socketsetuppath"
    systemd-notify "EXTEND_TIMEOUT_USEC=${timeout_sec}000000"
    export SECRET=$secret TIMEOUT_SEC=$timeout_sec
    # shellcheck disable=2016,2097,2098
    exec socat -U \
      UNIX-LISTEN:"$socketpath,unlink-close,fork,umask=177" \
      SYSTEM:'systemd-notify "EXTEND_TIMEOUT_USEC=${TIMEOUT_SEC}000000"; printf "%s" \"\$SECRET\"'
  fi
}

waitforsocket() {
  local tries socketpath=$1
  for ((tries=0;tries<5;tries++)); do
    if [[ -S "$socketpath" ]]; then
      return 0
    fi
    sleep .1
  done
  return 1
}

socket_credential_cache "$@"
